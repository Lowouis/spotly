// Prisma configuration file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  surname       String?
  username      String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  external      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  entry         entry[]
  role          role      @default(USER)
  domain        domain?   @relation("userToDomain")
  category      category? @relation("userToCategory")
  resource      resource? @relation("userToResource")
}

enum role {
  USER
  ADMIN
  SUPERADMIN
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model category {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  resource    resource[]
  ownerId     Int?        @unique
  owner       User?       @relation("userToCategory", fields: [ownerId], references: [id])
  pickable    PickStatus? @default(HIGH_TRUST)
}

enum PickStatus {
  FLUENT
  HIGH_TRUST
  LOW_TRUST
  DIGIT
  LOW_AUTH
  HIGH_AUTH
}

model domain {
  id            Int        @id @default(autoincrement())
  name          String
  code          String
  address       String
  street_number String
  country       String
  city          String
  zip           String
  phone         String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  ownerId       Int?       @unique
  owner         User?      @relation("userToDomain", fields: [ownerId], references: [id])
  pickable      PickStatus @default(HIGH_TRUST)
  resource      resource[]
}

enum status {
  ACCEPTED
  AVAILABLE
  USED
  REJECTED
  LOCKED
  ENDED
  WAITING
}

model resource {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  moderate    Boolean
  domainId    Int
  options     option[]    @relation("resourceToOption")
  categoryId  Int
  status      status      @default(AVAILABLE)
  category    category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  domains     domain      @relation(fields: [domainId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  entry       entry[]
  ownerId     Int?        @unique
  owner       User?       @relation("userToResource", fields: [ownerId], references: [id])
  pickable    PickStatus? @default(HIGH_TRUST)
}

model option {
  id         Int      @id @default(autoincrement())
  tag        String
  resourceId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resource   resource @relation("resourceToOption", fields: [resourceId], references: [id])
}

model entry {
  id                        Int       @id @default(autoincrement())
  resourceId                Int
  userId                    Int
  comment                   String?
  moderate                  status    @default(ACCEPTED)
  lastUpdatedModerateStatus DateTime? @default(now())
  adminNote                 String?
  startDate                 DateTime
  endDate                   DateTime
  createdAt                 DateTime  @default(now())
  returned                  Boolean   @default(false)
  returnedConfirmationCode  String?   @unique
  updatedAt                 DateTime  @updatedAt
  resource                  resource  @relation(fields: [resourceId], references: [id])
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model authorizedLocation {
  id        Int      @id @default(autoincrement())
  libelle   String
  ip        String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
